import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from db import Database
import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ –∑ —Ç–≤–æ—ó–º MongoDB URI
mongo_uri = "mongodb+srv://Vlad:manreds7@cluster0.d0qnz.mongodb.net/pantelmed?retryWrites=true&w=majority&appName=Cluster0"
db = Database(mongo_uri)

# –í—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ —ñ–Ω—Ç—Ä–æ
WELCOME_MESSAGE = (
    "–ù–µ –º–æ–∂–µ—à —Å—Ö—É–¥–Ω—É—Ç–∏, –Ω–∞–∫–∞—á–∞—Ç–∏—Å—è, –ø–æ—á—É–≤–∞—Ç–∏—Å—è –≤–ø–µ–≤–Ω–µ–Ω–æ —á–∏ –µ–Ω–µ—Ä–≥—ñ–π–Ω–æ? –¢–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–µ–Ω –±—ñ–æ—Ö–∞–∫—ñ–Ω–≥! üëä\n\n"
    "–Ø ‚Äî –í–ª–∞–¥ –ö—Ä–∞–≤—á—É–∫, –µ–∫—Å–ø–µ—Ä—Ç —É –±—ñ–æ—Ö–∞–∫—ñ–Ω–≥—É, –∑–¥–æ—Ä–æ–≤‚Äô—ó, –Ω–µ–π—Ä–æ–±—ñ–æ–ª–æ–≥—ñ—ó, –ë–ê–î–∞—Ö, —Å–∏–ª–æ–≤–æ–º—É —Å–ø–æ—Ä—Ç—ñ, —î–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞—Ö, —Ñ–∞—Ä–º–∞–∫–æ–ª–æ–≥—ñ—ó —Ç–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è—Ö —Ç—ñ–ª–∞ –π –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É. üí™\n\n"
    "–©–æ –æ—Ç—Ä–∏–º–∞—î—à –Ω–∞ PantelMed:\n"
    "üß¨ –ö–æ—Ä–∏—Å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ (—è–∫ –Ω–∞–∫–∞—á–∞—Ç–∏—Å—è/—Å—Ö—É–¥–Ω—É—Ç–∏, —â–æ —ó—Å—Ç–∏, —è–∫—ñ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ä–æ–±–∏—Ç–∏)\n"
    "‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è –∑–¥–æ—Ä–æ–≤‚Äô—è —Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—É –≤ —Å–ø–æ—Ä—Ç—ñ\n"
    "üöÄ –î–æ—Å—Ç—É–ø –¥–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ PantelMed\n\n"
    "–û–±–µ—Ä–∏ —Å–≤—ñ–π —à–ª—è—Ö ‚¨áÔ∏è"
)

# –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –Ω–µ–ø–ª–∞—Ç–Ω–∏–∫—ñ–≤
REMINDER_1_5H = "–ù–µ –º–æ–∂–µ—à —Å—Ö—É–¥–Ω—É—Ç–∏ —á–∏ –Ω–∞–∫–∞—á–∞—Ç–∏—Å—è? –ë—ñ–æ—Ö–∞–∫—ñ–Ω–≥ —ñ–∑ PantelMed –∑–º—ñ–Ω–∏—Ç—å —Ç–≤–æ—î –∂–∏—Ç—Ç—è! –ü–µ—Ä–µ—Ö–æ–¥—å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä —Å–≤–æ—î –∑–¥–æ—Ä–æ–≤‚Äô—è! üëâ [–ü–µ—Ä–µ–π—Ç–∏]"
REMINDER_5D = "–©–µ –Ω–µ —Å–ø—Ä–æ–±—É–≤–∞–≤? –û—Ç—Ä–∏–º–∞–π –¥–æ—Å—Ç—É–ø –¥–æ –∞–Ω–∞–ª—ñ–∑–æ–≤ —ñ –ë–ê–î—ñ–≤ –∑–∞ 2.6 USDT! –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏ —à–∞–Ω—Å –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–≤–æ—î –∑–¥–æ—Ä–æ–≤‚Äô—è! üëâ [–ü–µ—Ä–µ–π—Ç–∏]"
REMINDER_7D = "–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è —Ç–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—É! –ó–∞–≤–∞–Ω—Ç–∞–∂ —ñ –ø–æ—á–Ω–∏ –±—ñ–æ—Ö–∞–∫—ñ–Ω–≥ —Å—å–æ–≥–æ–¥–Ω—ñ! üëâ [–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏]"

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
MAIN_KEYBOARD = [
    [InlineKeyboardButton("üß¨ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤–æ—î –∑–¥–æ—Ä–æ–≤‚Äô—è", callback_data='check_health')],
    [InlineKeyboardButton("üíä –ú–∞–≥–∞–∑–∏–Ω –ë–ê–î—ñ–≤", callback_data='shop_supplements')],
    [InlineKeyboardButton("üìñ –õ–æ–Ω–≥—Ä—ñ–¥–∏", callback_data='longreads')],
    [InlineKeyboardButton("üë®‚Äç‚öïÔ∏è –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –∑ –µ–∫—Å–ø–µ—Ä—Ç–æ–º", callback_data='consultation')],
    [InlineKeyboardButton("‚ÑπÔ∏è –ü—Ä–æ PantelMed", callback_data='about')]
]

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ñ—Ç–∞–Ω–Ω—è
WELCOME_KEYBOARD = [
    [InlineKeyboardButton("–•–æ—á—É —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—é/–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", callback_data='continue')],
    [InlineKeyboardButton("–ú–µ–Ω—ñ –Ω–µ —Ç—Ä–µ–±–∞ —Ö–æ—Ä–æ—à–µ –∑–¥–æ—Ä–æ–≤‚Äô—è", callback_data='exit')]
]

class TelegramBot:
    def __init__(self, token):
        self.application = Application.builder().token(token).build()
        self.setup_handlers()

    def setup_handlers(self):
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        self.application.job_queue.run_repeating(self.check_reminders, interval=3600)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ–≥–æ–¥–∏–Ω–∏

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–í—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ç—Ä–æ —Ç–∞ –∫–Ω–æ–ø–∫–∞–º–∏"""
        user = update.effective_user
        logger.info(f"New user: {user.id}, {user.username}, {datetime.datetime.utcnow()}")
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É MongoDB
        user_data = {
            "telegram_id": str(user.id),
            "username": user.username,
            "subscription_active": False,
            "active_modules": [],
            "first_interaction": datetime.datetime.utcnow(),
            "interactions": []
        }
        db.insert_document("users", user_data)

        reply_markup = InlineKeyboardMarkup(WELCOME_KEYBOARD)
        await update.message.reply_text(WELCOME_MESSAGE, reply_markup=reply_markup)

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()

        user_id = str(query.from_user.id)
        interaction = {"time": datetime.datetime.utcnow(), "action": query.data}
        db.update_document("users", {"telegram_id": user_id}, {"$push": {"interactions": interaction}})
        logger.info(f"User {user_id} clicked: {query.data}")

        if query.data == 'continue':
            reply_markup = InlineKeyboardMarkup(MAIN_KEYBOARD)
            await query.edit_message_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=reply_markup)
        elif query.data == 'exit':
            await query.edit_message_text("–î–æ–∫–∏! –Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—à ‚Äî –ø–æ–≤–µ—Ä—Ç–∞–π—Å—è! üëã")
        elif query.data == 'check_health':
            await query.edit_message_text("–ü–µ—Ä–µ—Ö–æ–¥—å –Ω–∞ PantelMed –¥–ª—è –∞–Ω–∞–ª—ñ–∑—ñ–≤ –∑–¥–æ—Ä–æ–≤‚Äô—è! üëâ [–ü–æ—Å–∏–ª–∞–Ω–Ω—è]")
        elif query.data == 'shop_supplements':
            await query.edit_message_text("–ü–µ—Ä–µ—Ö–æ–¥—å –¥–æ PantelMed Shop –∑–∞ –ë–ê–î–∞–º–∏! üëâ [–ü–æ—Å–∏–ª–∞–Ω–Ω—è]")
        elif query.data == 'longreads':
            await query.edit_message_text("–õ–æ–Ω–≥—Ä—ñ–¥–∏: [–Ø–∫ –Ω–∞–∫–∞—á–∞—Ç–∏—Å—è] [–°–î–£–ì] üëâ [–ü–æ—Å–∏–ª–∞–Ω–Ω—è]")
        elif query.data == 'consultation':
            await query.edit_message_text("–ó–∞–ø–∏—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é: [–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–≤—ñ–π Telegram]")
        elif query.data == 'about':
            await query.edit_message_text("PantelMed ‚Äî —Ç–≤–æ—è –¥–æ—Ä–æ–≥–∞ –¥–æ –∑–¥–æ—Ä–æ–≤‚Äô—è —Ç–∞ –¥–æ–≤–≥–æ–ª—ñ—Ç—Ç—è! –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç üëâ [–ü–æ—Å–∏–ª–∞–Ω–Ω—è]")

    async def check_reminders(self, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –¥–ª—è –Ω–µ–ø–ª–∞—Ç–Ω–∏–∫—ñ–≤"""
        users = db.find_documents("users", {"subscription_active": False})
        for user in users:
            user_id = user["telegram_id"]
            first_interaction = user["first_interaction"]
            interactions = user.get("interactions", [])

            time_diff_1_5h = datetime.datetime.utcnow() - first_interaction > datetime.timedelta(hours=1.5)
            time_diff_5d = datetime.datetime.utcnow() - first_interaction > datetime.timedelta(days=5)
            time_diff_7d = datetime.datetime.utcnow() - first_interaction > datetime.timedelta(days=7)

            if time_diff_1_5h and not any("check_health" in str(i) or "shop_supplements" in str(i) for i in interactions):
                await context.bot.send_message(chat_id=user_id, text=REMINDER_1_5H)
                logger.info(f"Sent 1.5h reminder to {user_id}")
            elif time_diff_5d and not any("check_health" in str(i) or "shop_supplements" in str(i) for i in interactions):
                await context.bot.send_message(chat_id=user_id, text=REMINDER_5D)
                logger.info(f"Sent 5d reminder to {user_id}")
            elif time_diff_7d and not any("check_health" in str(i) or "shop_supplements" in str(i) for i in interactions):
                await context.bot.send_message(chat_id=user_id, text=REMINDER_7D)
                logger.info(f"Sent 7d reminder to {user_id}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Starting Telegram Bot...")
        self.application.run_polling()

if __name__ == "__main__":
    # –ó–∞–º—ñ–Ω–∏ –Ω–∞ —Ç–≤—ñ–π —Ç–æ–∫–µ–Ω –ø—ñ–∑–Ω—ñ—à–µ
    bot = TelegramBot("YOUR_TELEGRAM_BOT_TOKEN")
    bot.run()
