# routes/steroids.py
"""
PantelMed AI - Flask API –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è —Å—Ç–µ—Ä–æ—ó–¥–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
–ü–æ–≤–Ω–∞ –≤–µ–±-—ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ AI –∞—Å–∏—Å—Ç–µ–Ω—Ç–æ–º —Ç–∞ –∫–æ—Ä–µ–∫—Ç–∏–≤–∞–º–∏
"""

from flask import Blueprint, request, jsonify, session
from flask_cors import cross_origin
import json
from datetime import datetime, timedelta
from typing import Dict, List

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –Ω–∞—à–æ—ó —Å–∏—Å—Ç–µ–º–∏
from assistant.steroids.cycle_matcher import CycleMatcher, SteroidAIAssistant, UserProfile, ExperienceLevel, CycleGoal
from assistant.steroids.questionnaire import SteroidQuestionnaire
from models.user import User
from models.steroid_cycle import SteroidCycle, CycleProgress
from utils.auth import require_auth, get_current_user
from utils.payment import verify_crypto_payment

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Blueprint
steroids_bp = Blueprint('steroids', __name__, url_prefix='/api/steroids')

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è AI —Å–∏—Å—Ç–µ–º–∏
cycle_matcher = CycleMatcher()
ai_assistant = SteroidAIAssistant()
questionnaire = SteroidQuestionnaire()

# ===========================================
# –ê–ù–ö–ï–¢–£–í–ê–ù–ù–Ø –¢–ê –ü–Ü–î–ë–Ü–† –ö–£–†–°–Ü–í
# ===========================================

@steroids_bp.route('/questionnaire/start', methods=['POST'])
@require_auth
@cross_origin()
def start_questionnaire():
    """–ü–æ—á–∞—Ç–æ–∫ –∞–Ω–∫–µ—Ç—É–≤–∞–Ω–Ω—è –∑ –∫–æ—Ä–µ–∫—Ç–∏–≤–∞–º–∏"""
    
    user = get_current_user()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–ø–ª–∞—Ç–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
    payment_status = verify_crypto_payment(user.id)
    if not payment_status['paid']:
        return jsonify({
            'status': 'payment_required',
            'message': '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –∫—É—Ä—Å–∏ —Ç–∞ –¥–æ–∑—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω—ñ –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏',
            'free_info': '–ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–∏–ø–∏ –∫—É—Ä—Å—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞',
            'payment_info': payment_status
        }), 402
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è –∑ –∫–æ—Ä–µ–∫—Ç–∏–≤–∞–º–∏
    first_question = questionnaire.get_first_question()
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∞–Ω–∫–µ—Ç—É–≤–∞–Ω–Ω—è
    session['questionnaire_state'] = {
        'user_id': user.id,
        'started_at': datetime.utcnow().isoformat(),
        'current_question_id': first_question['id'],
        'answers': {}
    }
    
    return jsonify({
        'status': 'success',
        'message': 'üéØ –ü–æ—á–Ω–µ–º–æ –ø—ñ–¥–±—ñ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å—É!',
        'question': first_question,
        'progress': {
            'current': 1,
            'total': questionnaire.total_questions,
            'percentage': 5
        }
    })

@steroids_bp.route('/questionnaire/answer', methods=['POST'])
@require_auth
@cross_origin()
def submit_questionnaire_answer():
    """–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è"""
    
    data = request.get_json()
    question_id = data.get('question_id')
    answer = data.get('answer')
    
    if not question_id or not answer:
        return jsonify({'error': '–ü–æ—Ç—Ä—ñ–±–Ω—ñ question_id —Ç–∞ answer'}), 400
    
    state = session.get('questionnaire_state')
    if not state:
        return jsonify({'error': '–°–µ—Å—ñ—è –∞–Ω–∫–µ—Ç—É–≤–∞–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω–∞'}), 400
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    state['answers'][question_id] = answer
    
    # –ö–û–†–ï–ö–¢–ò–í–ò: –û–±—Ä–æ–±–∫–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å
    if question_id == 'blood_pressure' and answer == 'hypertension':
        # –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –≥—ñ–ø–µ—Ä—Ç–æ–Ω—ñ—ó
        state['answers']['hypertension_protocol'] = {
            'sartans': True,
            'magnesium_400mg': True,
            'tadalafil_5_10mg': True,
            'daily_monitoring': True
        }
    
    elif question_id == 'injection_readiness':
        # –ö–û–†–ï–ö–¢–ò–í–ò: –ù–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –¥–æ —ñ–Ω'—î–∫—Ü—ñ–π
        injection_warnings = {
            'no': '–¢—ñ–ª—å–∫–∏ —Ç–∞–±–ª–µ—Ç–∫–∏ - –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–Ñ–¢–¨–°–Ø',
            'scared_help': '–Ü–Ω\'—î–∫—Ü—ñ—ó —Ä–∞–∑ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å - –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–Ñ–¢–¨–°–Ø (–Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω—ñ –≥–æ—Ä–º–æ–Ω–∏)',
            'twice_weekly': '–û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –¥–æ–≤–≥–∏—Ö –µ—Ñ—ñ—Ä—ñ–≤',
            'comfortable': '–î–æ–∑–≤–æ–ª—è—î –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –µ—Ñ—ñ—Ä—ñ–≤',
            'daily': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≥–Ω—É—á–∫—ñ—Å—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª—ñ–≤'
        }
        state['injection_warning'] = injection_warnings.get(answer, '')
    
    elif question_id == 'lab_monitoring':
        # –ö–û–†–ï–ö–¢–ò–í–ò: –§—ñ–Ω–∞–Ω—Å–æ–≤–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –∑–¥–∞–≤–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑–∏
        monitoring_protocols = {
            'regular': '–ü–æ–≤–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: –µ—Å—Ç—Ä–∞–¥—ñ–æ–ª –¥–µ–Ω—å 10, —â–æ–º—ñ—Å—è—Ü—è –ø–æ–≤–Ω–∞ –ø–∞–Ω–µ–ª—å',
            'limited': '–ë–∞–∑–æ–≤–∏–π: —â–æ–º—ñ—Å—è—Ü—è –µ—Å—Ç—Ä–∞–¥—ñ–æ–ª + –ø—Ä–æ–ª–∞–∫—Ç–∏–Ω + –ó–ê–ö + –ª—ñ–ø—ñ–¥–∏ —á–µ—Ä–µ–∑ 4-6 —Ç–∏–∂–Ω—ñ–≤',
            'difficult': '–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π: –ø–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Ä–∞–∑ –≤ –º—ñ—Å—è—Ü—å –±–∞–∑–æ–≤–∏–π –ø–∞–∫–µ—Ç'
        }
        state['monitoring_protocol'] = monitoring_protocols.get(answer, '')
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
    next_question = questionnaire.get_next_question(question_id, state['answers'])
    
    if next_question:
        # –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç—É–≤–∞–Ω–Ω—è
        state['current_question_id'] = next_question['id']
        session['questionnaire_state'] = state
        
        return jsonify({
            'status': 'continue',
            'question': next_question,
            'progress': {
                'current': len(state['answers']),
                'total': questionnaire.total_questions,
                'percentage': (len(state['answers']) / questionnaire.total_questions) * 100
            },
            'warnings': state.get('injection_warning', '')
        })
    
    else:
        # –ê–Ω–∫–µ—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
        return complete_questionnaire(state)

def complete_questionnaire(state: Dict):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π"""
    
    user = get_current_user()
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    profile = create_user_profile_from_answers(state['answers'])
    
    # AI –ø—ñ–¥–±—ñ—Ä –∫—É—Ä—Å—ñ–≤
    recommendations = cycle_matcher.match_cycle(profile)
    
    if recommendations['status'] == 'blocked':
        return jsonify({
            'status': 'blocked',
            'reason': recommendations['reason'],
            'alternative': recommendations.get('alternative'),
            'consultation_required': True
        })
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≤ –ë–î
    save_questionnaire_results(user.id, state['answers'], recommendations)
    
    # –û—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
    session.pop('questionnaire_state', None)
    
    return jsonify({
        'status': 'completed',
        'message': '‚úÖ –ê–Ω–∫–µ—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í–∞—à—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:',
        'recommendations': recommendations,
        'ai_explanation': recommendations.get('ai_reasoning'),
        'safety_warnings': recommendations.get('safety_warnings', []),
        'monitoring': recommendations.get('monitoring_protocol'),
        'next_steps': [
            '–û–∑–Ω–∞–π–æ–º—Ç–µ—Å—è –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–º–∏ –∫—É—Ä—Å–∞–º–∏',
            '–ó–¥–∞–π—Ç–µ –±–∞–∑–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑–∏',
            '–ü—Ä–∏–¥–±–∞–π—Ç–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∏',
            '–ü–æ—á–Ω—ñ—Ç—å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤\'—è'
        ]
    })

# ===========================================
# AI –î–Ü–ê–õ–û–ì –¢–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–Ü–á
# ===========================================

@steroids_bp.route('/ai/chat', methods=['POST'])
@require_auth
@cross_origin()
def ai_chat():
    """AI –¥—ñ–∞–ª–æ–≥ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º"""
    
    data = request.get_json()
    message = data.get('message', '')
    context = data.get('context', {})
    
    user = get_current_user()
    
    # AI –æ–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    ai_response = ai_assistant.process_user_message(user.id, message, context)
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É
    save_ai_conversation(user.id, message, ai_response)
    
    return jsonify({
        'status': 'success',
        'ai_response': ai_response,
        'timestamp': datetime.utcnow().isoformat()
    })

@steroids_bp.route('/ai/progress-tracking', methods=['POST'])
@require_auth
@cross_origin()
def track_cycle_progress():
    """–í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –∫—É—Ä—Å—É –∑ AI"""
    
    data = request.get_json()
    cycle_id = data.get('cycle_id')
    progress_data = data.get('progress_data')
    
    user = get_current_user()
    
    # –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—É—Ä—Å—É
    active_cycle = SteroidCycle.find_active_cycle(user.id, cycle_id)
    if not active_cycle:
        return jsonify({'error': '–ê–∫—Ç–∏–≤–Ω–∏–π –∫—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}), 404
    
    # AI –∞–Ω–∞–ª—ñ–∑ –ø—Ä–æ–≥—Ä–µ—Å—É
    ai_analysis = ai_assistant._track_cycle_progress(user.id, str(progress_data), {
        'cycle_data': active_cycle.to_dict()
    })
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
    progress = CycleProgress(
        cycle_id=cycle_id,
        user_id=user.id,
        week_number=progress_data.get('week'),
        weight_kg=progress_data.get('weight'),
        side_effects=progress_data.get('side_effects', []),
        satisfaction_rating=progress_data.get('satisfaction'),
        ai_analysis=ai_analysis,
        recorded_at=datetime.utcnow()
    )
    progress.save()
    
    return jsonify({
        'status': 'success',
        'ai_analysis': ai_analysis,
        'recommendations': ai_analysis.get('recommendations', []),
        'next_check_date': (datetime.utcnow() + timedelta(weeks=1)).isoformat()
    })

# ===========================================
# –ö–£–†–°–ò –¢–ê –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á
# ===========================================

@steroids_bp.route('/cycles/recommended', methods=['GET'])
@require_auth
@cross_origin()
def get_recommended_cycles():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    
    user = get_current_user()
    
    # –û—Å—Ç–∞–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∫–µ—Ç—É–≤–∞–Ω–Ω—è
    last_results = get_last_questionnaire_results(user.id)
    if not last_results:
        return jsonify({
            'error': '–°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–π–¥—ñ—Ç—å –∞–Ω–∫–µ—Ç—É–≤–∞–Ω–Ω—è',
            'action': 'start_questionnaire'
        }), 400
    
    return jsonify({
        'status': 'success',
        'recommended_cycles': last_results['recommendations'],
        'updated_at': last_results['created_at']
    })

@steroids_bp.route('/cycles/<cycle_id>/details', methods=['GET'])
@require_auth
@cross_origin()
def get_cycle_details():
    """–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫—É—Ä—Å"""
    
    cycle_id = request.view_args['cycle_id']
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∫—É—Ä—Å—É
    cycle_details = load_cycle_details(cycle_id)
    if not cycle_details:
        return jsonify({'error': '–ö—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}), 404
    
    user = get_current_user()
    user_profile = get_user_profile(user.id)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–µ–∑–ø–µ–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    safety_check = cycle_matcher._check_safety_restrictions(user_profile)
    
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–≤–Ω–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ
    cost_breakdown = calculate_full_cycle_cost(cycle_id, user_profile.to_dict())
    
    return jsonify({
        'status': 'success',
        'cycle': cycle_details,
        'safety_check': safety_check,
        'cost_breakdown': cost_breakdown,
        'personalized_adjustments': get_personalized_adjustments(cycle_details, user_profile)
    })

@steroids_bp.route('/cycles/start', methods=['POST'])
@require_auth
@cross_origin()
def start_cycle():
    """–ü–æ—á–∞—Ç–æ–∫ –∫—É—Ä—Å—É"""
    
    data = request.get_json()
    cycle_id = data.get('cycle_id')
    start_date = data.get('start_date', datetime.utcnow().isoformat())
    
    user = get_current_user()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤
    active_cycles = SteroidCycle.find_active_cycles(user.id)
    if active_cycles:
        return jsonify({
            'error': '–£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –∫—É—Ä—Å',
            'active_cycle': active_cycles[0].to_dict()
        }), 400
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å—É
    cycle = SteroidCycle(
        user_id=user.id,
        cycle_template_id=cycle_id,
        start_date=datetime.fromisoformat(start_date.replace('Z', '+00:00')),
        status='active',
        personalized_adjustments=data.get('adjustments', {}),
        created_at=datetime.utcnow()
    )
    cycle.save()
    
    # AI –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫
    ai_message = ai_assistant._start_cycle_message(cycle.to_dict())
    
    return jsonify({
        'status': 'success',
        'message': 'üöÄ –ö—É—Ä—Å —Ä–æ–∑–ø–æ—á–∞—Ç–æ!',
        'cycle': cycle.to_dict(),
        'ai_guidance': ai_message,
        'first_check_date': (datetime.utcnow() + timedelta(days=10)).isoformat()
    })

# ===========================================
# –ü–†–û–ì–†–ï–°–Ü–Ø –¢–ê –ù–ê–°–¢–£–ü–ù–Ü –ö–£–†–°–ò
# ===========================================

@steroids_bp.route('/progression/next-cycle', methods=['POST'])
@require_auth
@cross_origin()
def suggest_next_cycle():
    """AI –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—É—Ä—Å—É (–Ω–∞ –ø—ñ–≤—Å—Ö–æ–¥–∏–Ω–∫–∏ –≤–∏—â–µ)"""
    
    data = request.get_json()
    completed_cycle_id = data.get('completed_cycle_id')
    cycle_results = data.get('results')
    
    user = get_current_user()
    
    # –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ–≥–æ –∫—É—Ä—Å—É
    completed_cycle = SteroidCycle.get(completed_cycle_id)
    if not completed_cycle or completed_cycle.user_id != user.id:
        return jsonify({'error': '–ö—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}), 404
    
    # AI –∞–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—ñ—è
    progression_analysis = ai_assistant._plan_next_cycle(user.id, {
        'cycle_results': cycle_results,
        'previous_cycle': completed_cycle.to_dict()
    })
    
    # –ö–û–†–ï–ö–¢–ò–í–ò: –õ–æ–≥—ñ–∫–∞ "–Ω–∞ –ø—ñ–≤—Å—Ö–æ–¥–∏–Ω–∫–∏ –≤–∏—â–µ"
    if cycle_results.get('satisfaction', 0) >= 7:
        next_level_cycles = find_progression_cycles(completed_cycle.cycle_template_id)
        progression_analysis['next_level_options'] = next_level_cycles
        progression_analysis['message'] = "üéØ –ì–æ—Ç–æ–≤–∏–π –¥–ª—è –∫—É—Ä—Å—É —Å–∏–ª—å–Ω—ñ—à–æ–≥–æ –Ω–∞ –ø—ñ–≤—Å—Ö–æ–¥–∏–Ω–∫–∏!"
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∫—É—Ä—Å—É
    completed_cycle.results = cycle_results
    completed_cycle.status = 'completed'
    completed_cycle.completed_at = datetime.utcnow()
    completed_cycle.save()
    
    return jsonify({
        'status': 'success',
        'progression_analysis': progression_analysis,
        'next_cycle_recommendations': progression_analysis.get('next_level_options', []),
        'waiting_period': calculate_waiting_period(completed_cycle.to_dict())
    })

# ===========================================
# –ë–ï–ó–ü–ï–ö–ê –¢–ê –ú–û–ù–Ü–¢–û–†–ò–ù–ì
# ===========================================

@steroids_bp.route('/safety/check', methods=['POST'])
@require_auth
@cross_origin()
def safety_check():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–µ–∑–ø–µ–∫–∏ –∫—É—Ä—Å—É"""
    
    data = request.get_json()
    cycle_data = data.get('cycle')
    user_conditions = data.get('medical_conditions', [])
    
    user = get_current_user()
    user_profile = get_user_profile(user.id)
    
    # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–µ–∑–ø–µ–∫–∏
    safety_analysis = {
        'overall_risk': 'low',
        'warnings': [],
        'contraindications': [],
        'required_monitoring': [],
        'adjustments_needed': []
    }
    
    # –ö–û–†–ï–ö–¢–ò–í–ò: –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    
    # –ì—ñ–ø–µ—Ä—Ç–æ–Ω—ñ—è
    if 'hypertension' in user_conditions:
        safety_analysis['warnings'].append('–ì—ñ–ø–µ—Ä—Ç–æ–Ω—ñ—è –ø–æ—Ç—Ä–µ–±—É—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É')
        safety_analysis['required_monitoring'].append('–©–æ–¥–µ–Ω–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å —Ç–∏—Å–∫—É')
        safety_analysis['adjustments_needed'].append({
            'type': 'hypertension_protocol',
            'additions': ['–°–∞—Ä—Ç–∞–Ω–∏', '–ú–∞–≥–Ω—ñ–π 400–º–≥', '–¢–∞–¥–∞–ª–∞—Ñ—ñ–ª 5-10–º–≥']
        })
    
    # –ê–ª–æ–ø–µ—Ü—ñ—è
    if user_profile.alopecia_status == 'active':
        safety_analysis['contraindications'].append('–î–ì–¢ –ø–æ—Ö—ñ–¥–Ω—ñ –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ')
        safety_analysis['overall_risk'] = 'critical'
    
    # –ê—Ç–µ—Ä–æ—Å–∫–ª–µ—Ä–æ–∑ 38+
    if user_profile.age >= 38 and 'atherosclerosis_suspected' in user_conditions:
        safety_analysis['contraindications'].append('–¢–∞–±–ª–µ—Ç–∫–∏ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ, –º–∞–∫—Å–∏–º—É–º 250–º–≥ —Ç–µ—Å—Ç—É')
        safety_analysis['overall_risk'] = 'high'
    
    return jsonify({
        'status': 'success',
        'safety_analysis': safety_analysis,
        'consultation_recommended': safety_analysis['overall_risk'] in ['high', 'critical']
    })

@steroids_bp.route('/monitoring/schedule', methods=['GET'])
@require_auth
@cross_origin()
def get_monitoring_schedule():
    """–†–æ–∑–∫–ª–∞–¥ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∞–Ω–∞–ª—ñ–∑—ñ–≤"""
    
    user = get_current_user()
    user_profile = get_user_profile(user.id)
    active_cycle = SteroidCycle.find_active_cycle(user.id)
    
    if not active_cycle:
        return jsonify({'error': '–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—É—Ä—Å—É'}), 404
    
    # –ö–û–†–ï–ö–¢–ò–í–ò: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–æ–∑–∫–ª–∞–¥—É –∑–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–º–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—è–º–∏
    schedule = generate_monitoring_schedule(user_profile, active_cycle)
    
    return jsonify({
        'status': 'success',
        'monitoring_schedule': schedule,
        'cost_estimate': schedule['total_cost_usd'],
        'next_test_date': schedule['next_test']
    })

# ===========================================
# –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á
# ===========================================

def create_user_profile_from_answers(answers: Dict) -> UserProfile:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∞–Ω–∫–µ—Ç–∏"""
    
    return UserProfile(
        age=int(answers.get('age', '25').split('-')[0]),
        weight=int(answers.get('weight', '75').split('-')[0]),
        height=int(answers.get('height', '175').split('-')[0]),
        experience_level=ExperienceLevel(answers.get('experience_level', 'beginner')),
        cycle_count=int(answers.get('cycle_count', '0')),
        main_goal=CycleGoal(answers.get('main_goal', 'mass_gain')),
        sport_type=answers.get('sport_type', 'fitness'),
        duration_preference=answers.get('duration', '8_weeks'),
        alopecia_status=answers.get('alopecia', 'none'),
        prostate_status=answers.get('prostate', 'healthy'),
        liver_status=answers.get('liver', 'healthy'),
        joint_status=answers.get('joints', 'healthy'),
        blood_pressure_status=answers.get('blood_pressure', 'normal'),
        atherosclerosis_risk=answers.get('atherosclerosis', 'no_risk'),
        injection_readiness=answers.get('injection_readiness', 'twice_weekly'),
        lab_monitoring_capability=answers.get('lab_monitoring', 'limited'),
        budget_category=answers.get('budget', 'standard'),
        max_budget_usd=int(answers.get('budget_amount', '200'))
    )

def save_questionnaire_results(user_id: str, answers: Dict, recommendations: Dict):
    """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∞–Ω–∫–µ—Ç—É–≤–∞–Ω–Ω—è"""
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ MongoDB –∞–±–æ —ñ–Ω—à—É –ë–î
    from models.questionnaire_result import QuestionnaireResult
    
    result = QuestionnaireResult(
        user_id=user_id,
        answers=answers,
        recommendations=recommendations,
        created_at=datetime.utcnow()
    )
    result.save()

def get_last_questionnaire_results(user_id: str) -> Dict:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∞–Ω–∫–µ—Ç—É–≤–∞–Ω–Ω—è"""
    
    from models.questionnaire_result import QuestionnaireResult
    return QuestionnaireResult.find_latest(user_id)

def calculate_waiting_period(completed_cycle: Dict) -> Dict:
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–µ—Ä—ñ–æ–¥—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –º—ñ–∂ –∫—É—Ä—Å–∞–º–∏"""
    
    cycle_duration = completed_cycle.get('duration_weeks', 8)
    
    # –ü—Ä–∞–≤–∏–ª–æ: —á–∞—Å –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è = —á–∞—Å –∫—É—Ä—Å—É + –ü–ö–¢
    waiting_weeks = cycle_duration + 3  # + 3 —Ç–∏–∂–Ω—ñ –ü–ö–¢
    
    return {
        'waiting_period_weeks': waiting_weeks,
        'earliest_next_cycle': (datetime.utcnow() + timedelta(weeks=waiting_weeks)).isoformat(),
        'reasoning': f"–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è {cycle_duration}-—Ç–∏–∂–Ω–µ–≤–æ–≥–æ –∫—É—Ä—Å—É + –ü–ö–¢"
    }

# ===========================================
# –Ü–ù–¢–ï–ì–†–ê–¶–Ü–Ø –ó –ö–ê–¢–ê–õ–û–ì–û–ú –ö–£–†–°–Ü–í
# ===========================================

@steroids_bp.route('/dashboard', methods=['GET'])
@require_auth
@cross_origin()
def get_user_dashboard():
    """–ì–æ–ª–æ–≤–Ω–∞ –ø–∞–Ω–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è –∞–Ω–∫–µ—Ç—É–≤–∞–Ω–Ω—è"""
    
    user = get_current_user()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–ø–ª–∞—Ç–∏
    payment_status = verify_crypto_payment(user.id)
    if not payment_status['paid']:
        return jsonify({
            'status': 'payment_required',
            'message': '–î–æ—Å—Ç—É–ø –¥–æ –ø–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏'
        }), 402
    
    # AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    ai_recommendations = get_user_ai_recommendations(user.id)
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ñ –∫—É—Ä—Å–∏
    popular_cycles = get_popular_cycles_for_user(user.id)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    user_stats = {
        'total_cycles': SteroidCycle.count_user_cycles(user.id),
        'experience_level': get_user_experience_level(user.id),
        'safety_score': calculate_user_safety_score(user.id)
    }
    
    dashboard = {
        'ai_recommendations': ai_recommendations,
        'popular_cycles': popular_cycles,
        'user_stats': user_stats,
        'quick_actions': [
            {'action': 'browse_all_cycles', 'label': 'üîç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –∫—É—Ä—Å–∏'},
            {'action': 'compare_cycles', 'label': '‚öñÔ∏è –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ –∫—É—Ä—Å–∏'},
            {'action': 'filter_by_goal', 'label': 'üéØ –§—ñ–ª—å—Ç—Ä –∑–∞ —Ü—ñ–ª—è–º–∏'},
            {'action': 'ai_chat', 'label': 'ü§ñ –ß–∞—Ç –∑ AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º'}
        ],
        'navigation_menu': [
            {'id': 'ai_recommendations', 'label': 'üéØ AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó', 'badge': len(ai_recommendations)},
            {'id': 'all_cycles', 'label': 'üìö –í—Å—ñ –∫—É—Ä—Å–∏', 'badge': get_total_cycles_count()},
            {'id': 'my_cycles', 'label': 'üìä –ú–æ—ó –∫—É—Ä—Å–∏', 'badge': user_stats['total_cycles']},
            {'id': 'supplements', 'label': 'üíä –ë–ê–î–∏ —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞'},
            {'id': 'monitoring', 'label': 'üî¨ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤\'—è'},
            {'id': 'hrt', 'label': '‚öïÔ∏è –ì–ó–¢ –ø—Ä–æ—Ç–æ–∫–æ–ª–∏'}
        ]
    }
    
    return jsonify({
        'status': 'success',
        'dashboard': dashboard
    })

@steroids_bp.route('/menu/navigation', methods=['GET'])
@require_auth
@cross_origin()
def get_navigation_menu():
    """–ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–µ –º–µ–Ω—é –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –µ–ª–µ–º–µ–Ω—Ç—ñ–≤"""
    
    user = get_current_user()
    payment_status = verify_crypto_payment(user.id)
    
    if not payment_status['paid']:
        # –û–±–º–µ–∂–µ–Ω–µ –º–µ–Ω—é –¥–ª—è –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        return jsonify({
            'status': 'limited',
            'menu': [
                {'id': 'questionnaire', 'label': 'üìã –ü—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É', 'available': True},
                {'id': 'free_info', 'label': 'üìñ –ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', 'available': True},
                {'id': 'payment', 'label': 'üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ –¥–æ—Å—Ç—É–ø', 'available': True, 'highlight': True}
            ]
        })
    
    # –ü–æ–≤–Ω–µ –º–µ–Ω—é –¥–ª—è –æ–ø–ª–∞—á–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    menu = [
        {
            'id': 'ai_recommendations', 
            'label': 'üéØ AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó',
            'description': '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –∫—É—Ä—Å–∏ –ø—ñ–¥—ñ–±—Ä–∞–Ω—ñ AI',
            'available': True,
            'badge': count_user_recommendations(user.id)
        },
        {
            'id': 'browse_cycles',
            'label': 'üîç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –∫—É—Ä—Å–∏', 
            'description': '–ü–æ–≤–Ω–∏–π –∫–∞—Ç–∞–ª–æ–≥ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏',
            'available': True,
            'badge': get_total_cycles_count(),
            'submenu': [
                {'id': 'short_cycles', 'label': '‚ö° –ö–æ—Ä–æ—Ç–∫—ñ (4 —Ç–∏–∂–Ω—ñ)'},
                {'id': 'medium_cycles', 'label': 'üìÖ –°–µ—Ä–µ–¥–Ω—ñ (8-12 —Ç–∏–∂–Ω—ñ–≤)'},
                {'id': 'long_cycles', 'label': 'üìÜ –î–æ–≤–≥—ñ (14-16 —Ç–∏–∂–Ω—ñ–≤)'},
                {'id': 'specialized', 'label': 'üéØ –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ'}
            ]
        },
        {
            'id': 'compare_cycles',
            'label': '‚öñÔ∏è –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ –∫—É—Ä—Å–∏',
            'description': '–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–æ 4 –∫—É—Ä—Å—ñ–≤',
            'available': True
        },
        {
            'id': 'cycle_builder',
            'label': 'üõ†Ô∏è –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫—É—Ä—Å—É',
            'description': '–°—Ç–≤–æ—Ä–∏—Ç–∏ –≤–ª–∞—Å–Ω–∏–π –∫—É—Ä—Å –∑ AI',
            'available': True
        },
        {
            'id': 'supplements',
            'label': 'üíä –ë–ê–î–∏ —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞',
            'description': '–ë–∞–∑–∞ —Å—É–ø–ø–ª–µ–º–µ–Ω—Ç—ñ–≤',
            'available': True,
            'submenu': [
                {'id': 'on_cycle_support', 'label': '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –Ω–∞ –∫—É—Ä—Å—ñ'},
                {'id': 'pct_supplements', 'label': '–°—É–ø–ø–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è –ü–ö–¢'},
                {'id': 'general_health', 'label': '–ó–∞–≥–∞–ª—å–Ω–µ –∑–¥–æ—Ä–æ–≤\'—è'}
            ]
        },
        {
            'id': 'my_cycles',
            'label': 'üìä –ú–æ—ó –∫—É—Ä—Å–∏',
            'description': '–Ü—Å—Ç–æ—Ä—ñ—è —Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å',
            'available': True,
            'badge': SteroidCycle.count_user_cycles(user.id)
        },
        {
            'id': 'monitoring',
            'label': 'üî¨ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥',
            'description': '–ê–Ω–∞–ª—ñ–∑–∏ —Ç–∞ –∑–¥–æ—Ä–æ–≤\'—è',
            'available': True
        },
        {
            'id': 'hrt_protocols',
            'label': '‚öïÔ∏è –ì–ó–¢',
            'description': '–ì–æ—Ä–º–æ–Ω–æ–∑–∞–º—ñ—Å–Ω–∞ —Ç–µ—Ä–∞–ø—ñ—è',
            'available': True
        },
        {
            'id': 'ai_chat',
            'label': 'ü§ñ AI –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç',
            'description': '–ß–∞—Ç –∑ AI —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–æ–º',
            'available': True
        }
    ]
    
    return jsonify({
        'status': 'success',
        'menu': menu,
        'user_level': get_user_experience_level(user.id)
    })

@steroids_bp.route('/quick-access/<action>', methods=['GET'])
@require_auth
@cross_origin()
def quick_access_actions(action: str):
    """–®–≤–∏–¥–∫—ñ –¥—ñ—ó –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    
    user = get_current_user()
    payment_status = verify_crypto_payment(user.id)
    
    if not payment_status['paid']:
        return jsonify({'status': 'payment_required'}), 402
    
    user_profile = get_user_profile(user.id)
    
    if action == 'browse_by_goal':
        # –ö—É—Ä—Å–∏ –∑–∞ —Ü—ñ–ª—è–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_goal = user_profile.main_goal if user_profile else 'mass_gain'
        cycles = filter_cycles_by_goal(user_goal)
        
        return jsonify({
            'status': 'success',
            'action': 'browse_by_goal',
            'goal': user_goal,
            'cycles': cycles
        })
    
    elif action == 'browse_by_experience':
        # –ö—É—Ä—Å–∏ –∑–∞ —Ä—ñ–≤–Ω–µ–º –¥–æ—Å–≤—ñ–¥—É
        experience_level = get_user_experience_level(user.id)
        cycles = filter_cycles_by_experience(experience_level)
        
        return jsonify({
            'status': 'success', 
            'action': 'browse_by_experience',
            'experience_level': experience_level,
            'cycles': cycles
        })
    
    elif action == 'budget_optimizer':
        # –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞ –±—é–¥–∂–µ—Ç–æ–º
        budget = user_profile.max_budget_usd if user_profile else 200
        optimized_cycles = optimize_cycles_by_budget(budget, user_profile)
        
        return jsonify({
            'status': 'success',
            'action': 'budget_optimizer', 
            'budget': budget,
            'optimized_cycles': optimized_cycles
        })
    
    elif action == 'safety_first':
        # –ù–∞–π–±–µ–∑–ø–µ—á–Ω—ñ—à—ñ –∫—É—Ä—Å–∏
        safe_cycles = get_safest_cycles_for_user(user_profile)
        
        return jsonify({
            'status': 'success',
            'action': 'safety_first',
            'safe_cycles': safe_cycles
        })
    
    else:
        return jsonify({'error': '–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è'}), 400

# ===========================================
# –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ê –ê–ù–ê–õ–Ü–¢–ò–ö–ê
# ===========================================

@steroids_bp.route('/stats/user', methods=['GET'])
@require_auth
@cross_origin()
def get_user_stats():
    """–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    
    user = get_current_user()
    
    stats = {
        'profile': {
            'total_cycles': SteroidCycle.count_user_cycles(user.id),
            'current_experience_level': get_user_experience_level(user.id),
            'safety_score': calculate_user_safety_score(user.id),
            'progression_path': get_user_progression_path(user.id)
        },
        'browsing': {
            'total_cycles_viewed': count_user_cycle_views(user.id),
            'cycles_compared': count_user_comparisons(user.id),
            'favorite_categories': get_user_favorite_categories(user.id)
        },
        'ai_interaction': {
            'ai_recommendations_received': count_ai_recommendations(user.id),
            'ai_chat_sessions': count_ai_chat_sessions(user.id),
            'personalized_cycles_created': count_personalized_cycles(user.id)
        },
        'achievements': generate_user_achievements(user.id)
    }
    
    return jsonify({
        'status': 'success',
        'stats': stats
    })

@steroids_bp.route('/stats/popular', methods=['GET'])
@require_auth
@cross_origin()
def get_popular_cycles_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤"""
    
    stats = {
        'most_viewed': get_most_viewed_cycles(),
        'most_started': get_most_started_cycles(),
        'highest_rated': get_highest_rated_cycles(),
        'trending_this_month': get_trending_cycles(),
        'by_experience_level': {
            'beginner': get_popular_cycles_by_level('beginner'),
            'intermediate': get_popular_cycles_by_level('intermediate'),
            'advanced': get_popular_cycles_by_level('advanced')
        }
    }
    
    return jsonify({
        'status': 'success',
        'popular_stats': stats
    })

# ===========================================
# –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á
# ===========================================

def get_user_ai_recommendations(user_id: str) -> List[Dict]:
    """AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    
    last_results = get_last_questionnaire_results(user_id)
    if not last_results:
        return []
    
    return last_results.get('recommendations', {}).get('recommended_cycles', [])

def get_popular_cycles_for_user(user_id: str) -> List[Dict]:
    """–ü–æ–ø—É–ª—è—Ä–Ω—ñ –∫—É—Ä—Å–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    
    user_profile = get_user_profile(user_id)
    experience_level = get_user_experience_level(user_id)
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ñ –∫—É—Ä—Å–∏ –¥–ª—è —Ä—ñ–≤–Ω—è –¥–æ—Å–≤—ñ–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    popular = get_popular_cycles_by_level(experience_level)
    
    return popular[:5]  # –¢–æ–ø 5

def count_user_recommendations(user_id: str) -> int:
    """–ö—ñ–ª—å–∫—ñ—Å—Ç—å AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π"""
    recommendations = get_user_ai_recommendations(user_id)
    return len(recommendations)

def filter_cycles_by_goal(goal: str) -> List[Dict]:
    """–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∫—É—Ä—Å—ñ–≤ –∑–∞ —Ü—ñ–ª–ª—é"""
    # –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
    return []

def filter_cycles_by_experience(experience_level: str) -> List[Dict]:
    """–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∫—É—Ä—Å—ñ–≤ –∑–∞ –¥–æ—Å–≤—ñ–¥–æ–º"""
    # –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
    return []

def optimize_cycles_by_budget(budget: int, user_profile) -> List[Dict]:
    """–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∫—É—Ä—Å—ñ–≤ –∑–∞ –±—é–¥–∂–µ—Ç–æ–º"""
    # –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
    return []

def get_safest_cycles_for_user(user_profile) -> List[Dict]:
    """–ù–∞–π–±–µ–∑–ø–µ—á–Ω—ñ—à—ñ –∫—É—Ä—Å–∏"""
    # –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥–±–æ—Ä—É –±–µ–∑–ø–µ—á–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤
    return []

# –§—É–Ω–∫—Ü—ñ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def count_user_cycle_views(user_id: str) -> int:
    return 0  # –ó–∞–≥–ª—É—à–∫–∞

def count_user_comparisons(user_id: str) -> int:
    return 0  # –ó–∞–≥–ª—É—à–∫–∞

def get_user_favorite_categories(user_id: str) -> List[str]:
    return []  # –ó–∞–≥–ª—É—à–∫–∞

def count_ai_recommendations(user_id: str) -> int:
    return 0  # –ó–∞–≥–ª—É—à–∫–∞

def count_ai_chat_sessions(user_id: str) -> int:
    return 0  # –ó–∞–≥–ª—É—à–∫–∞

def count_personalized_cycles(user_id: str) -> int:
    return 0  # –ó–∞–≥–ª—É—à–∫–∞

def generate_user_achievements(user_id: str) -> List[Dict]:
    return []  # –ó–∞–≥–ª—É—à–∫–∞

def get_most_viewed_cycles() -> List[Dict]:
    return []  # –ó–∞–≥–ª—É—à–∫–∞

def get_most_started_cycles() -> List[Dict]:
    return []  # –ó–∞–≥–ª—É—à–∫–∞

def get_highest_rated_cycles() -> List[Dict]:
    return []  # –ó–∞–≥–ª—É—à–∫–∞

def get_trending_cycles() -> List[Dict]:
    return []  # –ó–∞–≥–ª—É—à–∫–∞

def get_popular_cycles_by_level(level: str) -> List[Dict]:
    return []  # –ó–∞–≥–ª—É—à–∫–∞
